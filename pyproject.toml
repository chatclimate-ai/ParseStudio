[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "parsestudio"
version = "1.0.3"
authors = [
    {name = "Imene KOLLI", email = "imene.kolli@df.uzh.ch"},
]
description = "Parse PDF files using different parsers."
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: General",
]
dependencies = [
    "docling>=2.5.2,<3.0.0",
    "pymupdf>=1.24.13,<2.0.0",
    "llama-parse>=0.5.14,<0.6.0",
    "pytest>=8.3.3,<9.0.0",
    "python-dotenv>=1.0.1,<2.0.0",
    "anthropic",
    "openai",
    "srsly>=2.5.1",
]

[project.optional-dependencies]
dev = [
    "black>=24.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.5.0",
    "pytest-cov>=4.0.0",
    "types-requests",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]

[project.urls]
"Homepage" = "https://github.com/chatclimate-ai/ParseStudio"
"Bug Reports" = "https://github.com/chatclimate-ai/ParseStudio/issues"
"Source" = "https://github.com/chatclimate-ai/ParseStudio"

# Black - Code Formatting
[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

# isort - Import Sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["parsestudio"]
skip_glob = ["*/.venv/*", "*/venv/*"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# Ruff - Fast Python Linter
[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "C901", # too-complex
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "PT", # flake8-pytest-style
    "RET", # flake8-return
    "S", # flake8-bandit (security)
    "N", # pep8-naming
]
ignore = [
    "E501",  # Line too long (handled by black)
    "B008",  # Do not perform function calls in argument defaults
    "C901",  # Too complex (we'll handle this gradually)
    "S101",  # Use of assert (common in tests)
    "ARG001", # Unused function argument (common in parsers)
    "TID252", # Prefer absolute imports over relative imports from parent modules
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ARG", "FBT"] # Allow assert, unused args, and boolean args in tests
"__init__.py" = ["F401"] # Allow unused imports in __init__.py files

# mypy - Static Type Checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start with false, gradually enable
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Be lenient with third-party imports for now
[[tool.mypy.overrides]]
module = [
    "anthropic.*",
    "openai.*",
    "llama_parse.*",
    "docling.*",
    "docling_core.*",
    "fitz.*",
    "pymupdf.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["parsestudio"]
branch = true
omit = [
    "tests/*",
    "*/__init__.py",
    "parsestudio/logging_config.py",  # Skip logging config for now
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "isort>=6.0.1",
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    "pytest-cov>=7.0.0",
    "ruff>=0.12.12",
    "types-requests>=2.32.4.20250809",
]
