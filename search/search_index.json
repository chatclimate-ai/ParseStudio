{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Parstudio Documentation","text":""},{"location":"#entry-point","title":"Entry Point","text":"<p>The entry point for the <code>parsestudio</code> library is the PDFParser module,  that acts as the main interface for the library. </p> <p>The PDFParser module initializes the parser and provides a method to parse a PDF file. Which could be either: - A DoclingParser - A PymuPDFParser - A LlmapParser</p> <p>To run the parser, you can use the <code>run</code> method of the PDFParser module.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>The <code>PDFParser</code> module is initialized with a parser <code>name</code> and its <code>parser_kwargs</code> as arguments. Note that the <code>parser_kwargs</code> are optional. </p> <p>The <code>run</code> method of the <code>PDFParser</code> module returns a <code>ParserOutput</code> object that contains the parsed data. A <code>ParserOutput</code> object has the following attributes</p>"},{"location":"#parsestudio.parse.PDFParser","title":"<code>PDFParser</code>","text":"<p>Parse PDF files using different parsers.</p> Source code in <code>parsestudio/parse.py</code> <pre><code>class PDFParser:\n    \"\"\"\n    Parse PDF files using different parsers.\n    \"\"\"\n    def __init__(self, parser: Literal[\"docling\", \"llama\", \"pymupdf\"] = \"docling\", **parser_kwargs):\n        \"\"\"\n        Initialize the PDF parser with the specified parser.\n\n        Args:\n            parser (str): The parser to use. Options are 'docling' and 'llama', and 'pymupdf'. Defaults to 'docling'.\n            **parser_kwargs: Additional keyword arguments to pass to the parser. Check the documentation of the parser for more information.\n\n        Raises:\n            ValueError: If an invalid parser is specified.\n        \"\"\"\n        if parser == \"docling\":\n            self.parser = DoclingPDFParser(**parser_kwargs)\n        elif parser == \"llama\":\n            self.parser = LlamaPDFParser(**parser_kwargs)\n        elif parser == \"pymupdf\":\n            self.parser = PyMuPDFParser()\n        else:\n            raise ValueError(\n                \"Invalid parser specified. Please use 'docling', 'llama', or 'pymupdf'.\"\n            )\n\n    def run(\n            self, \n            pdf_path: Union[str, List[str]],\n            modalities: List[str] = [\"text\", \"tables\", \"images\"],\n            **kwargs\n            ) -&gt; List[ParserOutput]:\n        \"\"\"\n        Run the PDF parser on the given PDF file(s).\n\n        Args:\n            pdf_path (str or List[str]): The path to the PDF file(s) to parse.\n            modalities (List[str]): The modalities to extract from the PDF file(s). Defaults to [\"text\", \"tables\", \"images\"].\n            **kwargs: Additional keyword arguments to pass to 'docling' parser.\n\n        Returns:\n            List[ParserOutput]: The parsed output(s) from the PDF file(s).\n\n        Examples:\n\n        !!! example\n            ```python\n            # Initialize the parser\n            parser = PDFParser(parser=\"docling\")\n\n            # Parse the PDF file\n            outputs = parser.run(\"path/to/file.pdf\", backend=\"docling\")\n            print(len(outputs))  # Number of PDF files\n            # Output: 1\n\n            # Access text content\n            print(outputs[0].text)\n            # Output: text='Hello, World!'\n\n            # Access tables\n            print(outputs[0].tables)\n            # Output:\n            # [\n            #     TableElement(\n            #         markdown='| Column 1 | Column 2 |\n            #                   |----------|----------|\n            #                   | Value 1  | Value 2  |\n            #                   | Value 3  | Value 4  |',\n            #         dataframe=  Column 1  Column 2\n            #                     0  Value 1  Value 2\n            #                     1  Value 3  Value 4,\n            #         metadata=Metadata(page_number=1, bbox=[0, 0, 100, 100])\n            #     )\n            # ]\n\n            for table in outputs[0].tables:\n                metadata = table.metadata\n                markdown_table = table.markdown\n                pandas_dataframe = table.dataframe\n                print(metadata)\n                print(markdown_table)\n            # Output:\n            # Metadata(page_number=1, bbox=[0, 0, 100, 100])\n            # | Column 1 | Column 2 |\n            # |----------|----------|\n            # | Value 1  | Value 2  |\n            # | Value 3  | Value 4  |\n\n            # Access images\n            print(outputs[0].images)\n            # Output:\n            # [\n            #     ImageElement(\n            #         image=&lt;PIL.Image.Image image mode=RGB size=233x140 at 0x16E894E50&gt;,\n            #         metadata=Metadata(page_number=1, bbox=[0, 0, 100, 100])\n            #     )\n            # ]\n\n            for image in outputs[0].images:\n                metadata = image.metadata\n                image = image.image\n                print(metadata)\n                image.show()\n            # Output:\n            # Metadata(page_number=1, bbox=[0, 0, 100, 100])\n            # [Image shown]\n            ```\n        \"\"\"\n\n\n        outputs = self.parser.parse(\n            pdf_path, \n            modalities=modalities,\n            **kwargs\n            )\n        return outputs\n</code></pre>"},{"location":"#parsestudio.parse.PDFParser.__init__","title":"<code>__init__(parser='docling', **parser_kwargs)</code>","text":"<p>Initialize the PDF parser with the specified parser.</p> <p>Parameters:</p> Name Type Description Default <code>parser</code> <code>str</code> <p>The parser to use. Options are 'docling' and 'llama', and 'pymupdf'. Defaults to 'docling'.</p> <code>'docling'</code> <code>**parser_kwargs</code> <p>Additional keyword arguments to pass to the parser. Check the documentation of the parser for more information.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If an invalid parser is specified.</p> Source code in <code>parsestudio/parse.py</code> <pre><code>def __init__(self, parser: Literal[\"docling\", \"llama\", \"pymupdf\"] = \"docling\", **parser_kwargs):\n    \"\"\"\n    Initialize the PDF parser with the specified parser.\n\n    Args:\n        parser (str): The parser to use. Options are 'docling' and 'llama', and 'pymupdf'. Defaults to 'docling'.\n        **parser_kwargs: Additional keyword arguments to pass to the parser. Check the documentation of the parser for more information.\n\n    Raises:\n        ValueError: If an invalid parser is specified.\n    \"\"\"\n    if parser == \"docling\":\n        self.parser = DoclingPDFParser(**parser_kwargs)\n    elif parser == \"llama\":\n        self.parser = LlamaPDFParser(**parser_kwargs)\n    elif parser == \"pymupdf\":\n        self.parser = PyMuPDFParser()\n    else:\n        raise ValueError(\n            \"Invalid parser specified. Please use 'docling', 'llama', or 'pymupdf'.\"\n        )\n</code></pre>"},{"location":"#parsestudio.parse.PDFParser.run","title":"<code>run(pdf_path, modalities=['text', 'tables', 'images'], **kwargs)</code>","text":"<p>Run the PDF parser on the given PDF file(s).</p> <p>Parameters:</p> Name Type Description Default <code>pdf_path</code> <code>str or List[str]</code> <p>The path to the PDF file(s) to parse.</p> required <code>modalities</code> <code>List[str]</code> <p>The modalities to extract from the PDF file(s). Defaults to [\"text\", \"tables\", \"images\"].</p> <code>['text', 'tables', 'images']</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to 'docling' parser.</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[ParserOutput]</code> <p>List[ParserOutput]: The parsed output(s) from the PDF file(s).</p> <p>Examples:</p> <p>Example</p> <pre><code># Initialize the parser\nparser = PDFParser(parser=\"docling\")\n\n# Parse the PDF file\noutputs = parser.run(\"path/to/file.pdf\", backend=\"docling\")\nprint(len(outputs))  # Number of PDF files\n# Output: 1\n\n# Access text content\nprint(outputs[0].text)\n# Output: text='Hello, World!'\n\n# Access tables\nprint(outputs[0].tables)\n# Output:\n# [\n#     TableElement(\n#         markdown='| Column 1 | Column 2 |\n#                   |----------|----------|\n#                   | Value 1  | Value 2  |\n#                   | Value 3  | Value 4  |',\n#         dataframe=  Column 1  Column 2\n#                     0  Value 1  Value 2\n#                     1  Value 3  Value 4,\n#         metadata=Metadata(page_number=1, bbox=[0, 0, 100, 100])\n#     )\n# ]\n\nfor table in outputs[0].tables:\n    metadata = table.metadata\n    markdown_table = table.markdown\n    pandas_dataframe = table.dataframe\n    print(metadata)\n    print(markdown_table)\n# Output:\n# Metadata(page_number=1, bbox=[0, 0, 100, 100])\n# | Column 1 | Column 2 |\n# |----------|----------|\n# | Value 1  | Value 2  |\n# | Value 3  | Value 4  |\n\n# Access images\nprint(outputs[0].images)\n# Output:\n# [\n#     ImageElement(\n#         image=&lt;PIL.Image.Image image mode=RGB size=233x140 at 0x16E894E50&gt;,\n#         metadata=Metadata(page_number=1, bbox=[0, 0, 100, 100])\n#     )\n# ]\n\nfor image in outputs[0].images:\n    metadata = image.metadata\n    image = image.image\n    print(metadata)\n    image.show()\n# Output:\n# Metadata(page_number=1, bbox=[0, 0, 100, 100])\n# [Image shown]\n</code></pre> Source code in <code>parsestudio/parse.py</code> <pre><code>def run(\n        self, \n        pdf_path: Union[str, List[str]],\n        modalities: List[str] = [\"text\", \"tables\", \"images\"],\n        **kwargs\n        ) -&gt; List[ParserOutput]:\n    \"\"\"\n    Run the PDF parser on the given PDF file(s).\n\n    Args:\n        pdf_path (str or List[str]): The path to the PDF file(s) to parse.\n        modalities (List[str]): The modalities to extract from the PDF file(s). Defaults to [\"text\", \"tables\", \"images\"].\n        **kwargs: Additional keyword arguments to pass to 'docling' parser.\n\n    Returns:\n        List[ParserOutput]: The parsed output(s) from the PDF file(s).\n\n    Examples:\n\n    !!! example\n        ```python\n        # Initialize the parser\n        parser = PDFParser(parser=\"docling\")\n\n        # Parse the PDF file\n        outputs = parser.run(\"path/to/file.pdf\", backend=\"docling\")\n        print(len(outputs))  # Number of PDF files\n        # Output: 1\n\n        # Access text content\n        print(outputs[0].text)\n        # Output: text='Hello, World!'\n\n        # Access tables\n        print(outputs[0].tables)\n        # Output:\n        # [\n        #     TableElement(\n        #         markdown='| Column 1 | Column 2 |\n        #                   |----------|----------|\n        #                   | Value 1  | Value 2  |\n        #                   | Value 3  | Value 4  |',\n        #         dataframe=  Column 1  Column 2\n        #                     0  Value 1  Value 2\n        #                     1  Value 3  Value 4,\n        #         metadata=Metadata(page_number=1, bbox=[0, 0, 100, 100])\n        #     )\n        # ]\n\n        for table in outputs[0].tables:\n            metadata = table.metadata\n            markdown_table = table.markdown\n            pandas_dataframe = table.dataframe\n            print(metadata)\n            print(markdown_table)\n        # Output:\n        # Metadata(page_number=1, bbox=[0, 0, 100, 100])\n        # | Column 1 | Column 2 |\n        # |----------|----------|\n        # | Value 1  | Value 2  |\n        # | Value 3  | Value 4  |\n\n        # Access images\n        print(outputs[0].images)\n        # Output:\n        # [\n        #     ImageElement(\n        #         image=&lt;PIL.Image.Image image mode=RGB size=233x140 at 0x16E894E50&gt;,\n        #         metadata=Metadata(page_number=1, bbox=[0, 0, 100, 100])\n        #     )\n        # ]\n\n        for image in outputs[0].images:\n            metadata = image.metadata\n            image = image.image\n            print(metadata)\n            image.show()\n        # Output:\n        # Metadata(page_number=1, bbox=[0, 0, 100, 100])\n        # [Image shown]\n        ```\n    \"\"\"\n\n\n    outputs = self.parser.parse(\n        pdf_path, \n        modalities=modalities,\n        **kwargs\n        )\n    return outputs\n</code></pre>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide will help you install and set up the Parsestudio library to start parsing PDFs with ease.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<p>Before installing Parsestudio, ensure that the following requirements are met:</p> <ul> <li>Python 3.12 or later</li> <li>pip (Python package manager)</li> </ul>"},{"location":"installation/#installing-parsestudio","title":"Installing Parsestudio","text":""},{"location":"installation/#1-using-pip","title":"1. Using pip","text":"<p>You can install Parsestudio directly from PyPI using pip:</p> <p><pre><code>pip install parsestudio\n</code></pre> This will install the latest stable version of the library along with its dependencies.</p>"},{"location":"installation/#2-from-source","title":"2. From Source","text":"<p>If you prefer to install the library from the source code:</p> <ol> <li>Clone the Parsestudio repository from GitHub:</li> </ol> <pre><code>git clone https://github.com/chatclimate-ai/ParseStudio.git\ncd ParseStudio\n</code></pre> <ol> <li>Install the library using pip:</li> </ol> <pre><code>pip install .\n</code></pre> <p>Nou're now ready to use Parsestudio! \ud83c\udf89</p>"},{"location":"schemas/","title":"Schemas","text":""},{"location":"schemas/#parsestudio.parsers.schemas.ImageElement","title":"<code>ImageElement</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Image element.</p> <p>Attributes:</p> Name Type Description <code>image</code> <code>Image</code> <p>The image element.</p> <code>metadata</code> <code>Metadata</code> <p>Metadata of the image element.</p> Source code in <code>parsestudio/parsers/schemas.py</code> <pre><code>class ImageElement(BaseModel):\n    \"\"\"\n    Image element.\n\n    Attributes:\n        image (Image.Image): The image element.\n        metadata (Metadata): Metadata of the image element.\n    \"\"\"\n    image: Image.Image = Field(..., description=\"The image element.\")\n    metadata: Metadata = Field(..., description=\"Metadata of the image element.\")\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    @field_validator(\"image\")\n    def validate_image(cls, image):\n        if not isinstance(image, Image.Image):\n            raise ValueError(\"The 'image' key must be a PIL Image object.\")\n        return image\n\n    @field_validator(\"metadata\")\n    def validate_metadata(cls, metadata):\n        if metadata is not None and not isinstance(metadata, Metadata):\n            raise ValueError(\"The 'metadata' key must be a Metadata object.\")\n        return metadata\n</code></pre>"},{"location":"schemas/#parsestudio.parsers.schemas.Metadata","title":"<code>Metadata</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Metadata of the element.</p> <p>Attributes:</p> Name Type Description <code>page_number</code> <code>int</code> <p>The page number where the element is located.</p> <code>bbox</code> <code>List[float]</code> <p>Bounding box coordinates of the element.</p> Source code in <code>parsestudio/parsers/schemas.py</code> <pre><code>class Metadata(BaseModel):\n    \"\"\"\n    Metadata of the element.\n\n    Attributes:\n        page_number (int): The page number where the element is located.\n        bbox (List[float]): Bounding box coordinates of the element.\n\n    \"\"\"\n    page_number: int = Field(None, description=\"The page number where the element is located.\")\n    bbox: List[float] = Field(None, description=\"Bounding box coordinates of the element.\")\n\n    @field_validator(\"page_number\")\n    def validate_page_number(cls, page_number):\n        if not isinstance(page_number, int):\n            raise ValueError(\"The 'page_number' key must be an integer.\")\n        return page_number\n\n    @field_validator(\"bbox\")\n    def validate_bbox(cls, bbox):\n        if not isinstance(bbox, list) or len(bbox) != 4 or not all(isinstance(i, float) for i in bbox):\n            raise ValueError(\"The 'bbox' key must be a list of 4 floats.\")\n        return bbox\n</code></pre>"},{"location":"schemas/#parsestudio.parsers.schemas.ParserOutput","title":"<code>ParserOutput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Parser output.</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>TextElement</code> <p>The text element.</p> <code>tables</code> <code>List[TableElement]</code> <p>List of table elements.</p> <code>images</code> <code>List[ImageElement]</code> <p>List of image elements.</p> Source code in <code>parsestudio/parsers/schemas.py</code> <pre><code>class ParserOutput(BaseModel):\n    \"\"\"\n    Parser output.\n\n    Attributes:\n        text (TextElement): The text element.\n        tables (List[TableElement]): List of table elements.\n        images (List[ImageElement]): List of image elements.\n    \"\"\"\n    text: TextElement = Field(None, description=\"The text element.\")\n    tables : List[TableElement] = Field(None, description=\"List of table elements.\")\n    images: List[ImageElement] = Field(None, description=\"List of image elements.\")\n\n    @field_validator(\"text\")\n    def validate_text_element(cls, text_element):\n        if text_element is not None and not isinstance(text_element, TextElement):\n            raise ValueError(\"The 'text_element' key must be a TextElement object.\")\n        return text_element\n\n    @field_validator(\"tables\")\n    def validate_tables(cls, tables):\n        if tables is not None and not all(isinstance(i, TableElement) for i in tables):\n            raise ValueError(\"The 'tables' key must be a list of TableElement objects.\")\n        return tables\n\n    @field_validator(\"images\")\n    def validate_images(cls, images):\n        if images is not None and not all(isinstance(i, ImageElement) for i in images):\n            raise ValueError(\"The 'images' key must be a list of ImageElement objects.\")\n        return images\n</code></pre>"},{"location":"schemas/#parsestudio.parsers.schemas.TableElement","title":"<code>TableElement</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Table element.</p> <p>Attributes:</p> Name Type Description <code>markdown</code> <code>str</code> <p>The markdown representation of the table.</p> <code>dataframe</code> <code>DataFrame</code> <p>The pandas DataFrame representation of the table.</p> <code>metadata</code> <code>Metadata</code> <p>Metadata of the table.</p> Source code in <code>parsestudio/parsers/schemas.py</code> <pre><code>class TableElement(BaseModel):\n    \"\"\"\n    Table element.\n\n    Attributes:\n        markdown (str): The markdown representation of the table.\n        dataframe (pd.DataFrame): The pandas DataFrame representation of the table.\n        metadata (Metadata): Metadata of the table.\n    \"\"\"\n    markdown: str = Field(None, description=\"The markdown representation of the table.\")\n    dataframe: pd.DataFrame = Field(None, description=\"The pandas DataFrame representation of the table.\")\n    metadata: Metadata = Field(..., description=\"Metadata of the table.\")\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    @field_validator(\"markdown\")\n    def validate_table_md(cls, markdown):\n        if markdown is not None and not isinstance(markdown, str):\n            raise ValueError(\"The 'markdown' key must be a string.\")\n        return markdown\n\n    @field_validator(\"dataframe\")\n    def validate_table_df(cls, dataframe):\n        if dataframe is not None and not isinstance(dataframe, pd.DataFrame):\n            raise ValueError(\"The 'dataframe' key must be a pandas DataFrame.\")\n        return dataframe\n\n    @field_validator(\"metadata\")\n    def validate_table_metadata(cls, metadata):\n        if metadata is not None and not isinstance(metadata, Metadata):\n            raise ValueError(\"The 'metadata' key must be a TableMetadata object.\")\n        return metadata\n</code></pre>"},{"location":"schemas/#parsestudio.parsers.schemas.TextElement","title":"<code>TextElement</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Text element.</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str</code> <p>The text element.</p> Source code in <code>parsestudio/parsers/schemas.py</code> <pre><code>class TextElement(BaseModel):\n    \"\"\"\n    Text element.\n\n    Attributes:\n        text (str): The text element.\n    \"\"\"\n    text: str = Field(..., description=\"The text element.\")\n\n    @field_validator(\"text\")\n    def validate_text(cls, text):\n        if not isinstance(text, str):\n            raise ValueError(\"The 'text' key must be a string.\")\n        return text\n</code></pre>"},{"location":"parsers/docling_parser/","title":"The Docling Parser","text":"<p>The Docling parser uses docling under the hood to parse pdfs and extract text from them. It is a simple wrapper around the docling library that provides a more user-friendly interface.</p>"},{"location":"parsers/docling_parser/#documentation","title":"Documentation","text":""},{"location":"parsers/docling_parser/#parsestudio.parsers.docling_parser.DoclingPDFParser","title":"<code>DoclingPDFParser</code>","text":"<p>Parse a PDF file using the Docling Parser</p> <p>Parameters:</p> Name Type Description Default <code>pipeline_options</code> <code>PdfPipelineOptions</code> <p>Options for the PDF pipeline. </p> <code>PdfPipelineOptions(do_ocr=True, do_table_structure=True, table_structure_options=TableStructureOptions(do_cell_matching=False, mode=ACCURATE), ocr_options=EasyOcrOptions(force_full_page_ocr=True, use_gpu=False), images_scale=1.0, generate_picture_images=True)</code> <code>backend</code> <code>Union[DoclingParseDocumentBackend, PyPdfiumDocumentBackend]</code> <p>Backend to use for parsing the PDF.</p> <code>DoclingParseDocumentBackend</code> Source code in <code>parsestudio/parsers/docling_parser.py</code> <pre><code>class DoclingPDFParser:\n    \"\"\"\n    Parse a PDF file using the Docling Parser\n\n    Args:\n        pipeline_options (PdfPipelineOptions): Options for the PDF pipeline. \n        backend (Union[DoclingParseDocumentBackend, PyPdfiumDocumentBackend]): Backend to use for parsing the PDF.\n\n    \"\"\"\n\n    def __init__(\n            self,\n            pipeline_options: Optional[PdfPipelineOptions] = PdfPipelineOptions(\n                do_ocr=True,\n                do_table_structure=True,\n                table_structure_options= TableStructureOptions(\n                    do_cell_matching=False,\n                    mode= TableFormerMode.ACCURATE, # Or TableFormerMode.FAST\n                ),\n                ocr_options= EasyOcrOptions( # Or TesseractCliOcrOptions or TesseractOcrOptions\n                    force_full_page_ocr=True,\n                    use_gpu=False\n                ), # Other options: lang, ...\n                images_scale=1.0, # Needed to extract images\n                generate_picture_images=True # Needed to extract images\n            ),\n            backend: Optional[Union[DoclingParseDocumentBackend, PyPdfiumDocumentBackend]] = DoclingParseDocumentBackend\n            ):\n\n        self.converter = DocumentConverter(\n            allowed_formats=[InputFormat.PDF],\n            format_options={\n                InputFormat.PDF: PdfFormatOption(\n                    pipeline_options= pipeline_options,\n                    backend=backend\n                )\n            },\n        )\n\n    def load_documents(\n            self, \n            paths: List[str], \n            raises_on_error: bool = True,\n            max_num_pages: int = sys.maxsize,\n            max_file_size: int = sys.maxsize,\n        ) -&gt; Generator[ConversionResult, None, None]:\n        \"\"\"\n        Load the documents from the given paths and convert them to DoclingDocument objects.\n\n        Args:\n            paths (List[str]): List of paths to the documents\n            raises_on_error (bool): Whether to raise an error if the conversion fails. Default is True\n            max_num_pages (int): Maximum number of pages to convert. Default is sys.maxsize\n            max_file_size (int): Maximum file size to convert. Default is sys.maxsize\n\n        Returns:\n            result (Generator[ConversionResult, None, None]): Generator of ConversionResult objects\n        \"\"\"\n\n        yield from self.converter.convert_all(\n            paths,\n            raises_on_error=raises_on_error,\n            max_num_pages=max_num_pages,\n            max_file_size=max_file_size,\n        )\n\n    def _validate_modalities(self, modalities: List[str]) -&gt; None:\n        \"\"\"\n        Validate the modalities provided by the user. The valid modalities are: [\"text\", \"tables\", \"images\"]\n\n        Args:\n            modalities (List[str]): List of modalities to validate\n\n        Raises:\n            ValueError: If the modality is not valid\n        \"\"\"\n        valid_modalities = [\"text\", \"tables\", \"images\"]\n        for modality in modalities:\n            if modality not in valid_modalities:\n                raise ValueError(\n                    f\"Invalid modality: {modality}. The valid modalities are: {valid_modalities}\"\n                )\n\n    def parse(\n            self,\n            paths: Union[str, List[str]],\n            modalities: List[str] = [\"text\", \"tables\", \"images\"],\n            **kwargs,\n        ) -&gt; List[ParserOutput]:\n        \"\"\"\n        Parse the documents and extract the specified modalities.\n\n        Args:\n            paths (Union[str, List[str]]): Path or list of paths to the documents\n            modalities (List[str]): List of modalities to extract. Default is [\"text\", \"tables\", \"images\"]\n            **kwargs: Keyword arguments to pass to the export_to_markdown method. For example, markdown_options={\"image_placeholder\": \"&lt;image&gt;\"}\n\n        Returns:\n            data (List[ParserOutput]): List of ParserOutput objects\n\n        Raises:\n            ValueError: If the modality is not valid\n\n        Examples:\n        !!! example\n            ```python\n            parser = DoclingPDFParser()\n            data = parser.parse(\"path/to/document.pdf\", modalities=[\"text\", \"tables\", \"images\"])\n            print(len(data)) \n            # Output: 1\n            text = data[0].text # TextElement\n            tables = data[0].tables # List of TableElement\n            images = data[0].images # List of ImageElement\n\n            # Access the text\n            text = text.text\n\n\n            # Access the first table\n            table = tables[0]\n            # Access the markdown representation of the table\n            table_md = table.markdown\n            # Access the dataframe representation of the table\n            table_df = table.dataframe\n            # Access the metadata of the table\n            page_number = table.metadata.page_number\n            bbox = table.metadata.bbox\n\n            # Access the first image\n            image = images[0]\n            # Access the image object\n            image_obj = image.image # PIL Image object\n            # Access the metadata of the image\n            page_number = image.metadata.page_number\n            bbox = image.metadata.bbox\n            ```\n        \"\"\"\n        self._validate_modalities(modalities)\n\n        if isinstance(paths, str):\n            paths = [paths]\n\n        markdown_options = kwargs.get(\"markdown_options\", {})\n\n        raises_on_error = kwargs.get(\"raises_on_error\", True)\n        max_num_pages = kwargs.get(\"max_num_pages\", sys.maxsize)\n        max_file_size = kwargs.get(\"max_file_size\", sys.maxsize)\n\n        data = []\n        for result in self.load_documents(paths, raises_on_error, max_num_pages, max_file_size):\n            if result.status == ConversionStatus.SUCCESS:\n                output = self.__export_result(result.document, modalities, markdown_options)\n\n                data.append(output)\n\n            else:\n                raise ValueError(f\"Failed to parse the document: {result.errors}\")\n        return data\n\n    def __export_result(\n            self, \n            document: DoclingDocument, \n            modalities: List[str],\n            markdown_options: dict,\n        ) -&gt; ParserOutput:\n        \"\"\"\n        Export the result the ParserOutput object.\n\n        Args:\n            document (DoclingDocument): DoclingDocument object\n            modalities (List[str]): List of modalities to extract\n            markdown_options (dict): Options to pass to the export_to_markdown method\n\n        Returns:\n            output (ParserOutput): ParserOutput object\n        \"\"\"\n        text = TextElement(text=\"\")\n        tables: List[TableElement] = []\n        images: List[ImageElement] = []\n\n        if \"text\" in modalities:\n            text = self._extract_text(document, markdown_options)\n\n        if any(modality in modalities for modality in [\"tables\", \"images\"]):\n            for item, _ in document.iterate_items():\n                if \"tables\" in modalities and isinstance(item, TableItem):\n                    tables += self._extract_tables(item)\n\n                if \"images\" in modalities and isinstance(item, PictureItem):\n                    images += self._extract_images(item, document)\n\n        return ParserOutput(text=text, tables=tables, images=images)\n\n    @staticmethod\n    def _extract_tables(item: TableItem) -&gt; List[TableElement]:\n        \"\"\"\n        Extract the tables from the TableItem object.\n\n        Args:\n            item (TableItem): TableItem object\n\n        Returns:\n            tables (List[TableElement]): List of TableElement objects\n\n        Examples:\n        !!! example\n            ```python\n            parser = DoclingPDFParser()\n            table = parser._extract_tables(table_item)[0]\n            table_md = table.markdown\n            table_df = table.dataframe\n            page_number = table.metadata.page_number\n            bbox = table.metadata.bbox\n            ```\n        \"\"\"\n        table_md: str = item.export_to_markdown()\n        table_df: pd.DataFrame = item.export_to_dataframe()\n\n        page_no = item.prov[0].page_no\n        bbox = item.prov[0].bbox\n        bbox = (bbox.l, bbox.t, bbox.r, bbox.b)\n\n        return [TableElement(\n            markdown=table_md,\n            dataframe=table_df,\n            metadata= Metadata(page_number=page_no, bbox=bbox)\n            )]\n\n    @staticmethod\n    def _extract_images(item: PictureItem, doc: DoclingDocument) -&gt; List[ImageElement]:\n        \"\"\"\n        Extract the images from the PictureItem object.\n\n        Args:\n            item (PictureItem): PictureItem object\n            doc (DoclingDocument): DoclingDocument object\n\n        Returns:\n            images (List[ImageElement]): List of ImageElement objects\n\n        Examples:\n        !!! example\n            ```python\n            parser = DoclingPDFParser()\n            image = parser._extract_images(picture_item, doc)[0]\n            image_obj = image.image\n            page_number = image.metadata.page_number\n            bbox = image.metadata.bbox\n            ``` \n        \"\"\"\n        image: Image.Image = item.get_image(doc)\n        if image is None:\n            return []\n        page_no = item.prov[0].page_no\n        bbox = item.prov[0].bbox\n        bbox = (bbox.l, bbox.t, bbox.r, bbox.b)\n        return [\n            ImageElement(\n                image=image,\n                metadata= Metadata(page_number=page_no, bbox=bbox)\n                )\n            ]\n\n    def _extract_text(\n            self, \n            item: DoclingDocument,\n            markdown_options: dict,\n            ) -&gt; TextElement:\n        \"\"\"\n        Extract the text from the DoclingDocument object.\n\n        Args:\n            item (DoclingDocument): DoclingDocument object\n            markdown_options (dict): Options to pass to the export_to_markdown method\n\n        Returns:\n            text (TextElement): TextElement object\n\n        Examples:\n        !!! example\n            ```python\n            parser = DoclingPDFParser()\n            text = parser._extract_text(doc, markdown_options= {\n                \"image_mode\": ImageRefMode.EMBEDDED # embed the images in the markdown\n            })\n            text = text.text\n            ```\n        \"\"\"\n        return TextElement(text=item.export_to_markdown(**markdown_options))\n</code></pre>"},{"location":"parsers/docling_parser/#parsestudio.parsers.docling_parser.DoclingPDFParser.__export_result","title":"<code>__export_result(document, modalities, markdown_options)</code>","text":"<p>Export the result the ParserOutput object.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>DoclingDocument</code> <p>DoclingDocument object</p> required <code>modalities</code> <code>List[str]</code> <p>List of modalities to extract</p> required <code>markdown_options</code> <code>dict</code> <p>Options to pass to the export_to_markdown method</p> required <p>Returns:</p> Name Type Description <code>output</code> <code>ParserOutput</code> <p>ParserOutput object</p> Source code in <code>parsestudio/parsers/docling_parser.py</code> <pre><code>def __export_result(\n        self, \n        document: DoclingDocument, \n        modalities: List[str],\n        markdown_options: dict,\n    ) -&gt; ParserOutput:\n    \"\"\"\n    Export the result the ParserOutput object.\n\n    Args:\n        document (DoclingDocument): DoclingDocument object\n        modalities (List[str]): List of modalities to extract\n        markdown_options (dict): Options to pass to the export_to_markdown method\n\n    Returns:\n        output (ParserOutput): ParserOutput object\n    \"\"\"\n    text = TextElement(text=\"\")\n    tables: List[TableElement] = []\n    images: List[ImageElement] = []\n\n    if \"text\" in modalities:\n        text = self._extract_text(document, markdown_options)\n\n    if any(modality in modalities for modality in [\"tables\", \"images\"]):\n        for item, _ in document.iterate_items():\n            if \"tables\" in modalities and isinstance(item, TableItem):\n                tables += self._extract_tables(item)\n\n            if \"images\" in modalities and isinstance(item, PictureItem):\n                images += self._extract_images(item, document)\n\n    return ParserOutput(text=text, tables=tables, images=images)\n</code></pre>"},{"location":"parsers/docling_parser/#parsestudio.parsers.docling_parser.DoclingPDFParser._extract_images","title":"<code>_extract_images(item, doc)</code>  <code>staticmethod</code>","text":"<p>Extract the images from the PictureItem object.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>PictureItem</code> <p>PictureItem object</p> required <code>doc</code> <code>DoclingDocument</code> <p>DoclingDocument object</p> required <p>Returns:</p> Name Type Description <code>images</code> <code>List[ImageElement]</code> <p>List of ImageElement objects</p> <p>Examples:</p> <p>Example</p> <pre><code>parser = DoclingPDFParser()\nimage = parser._extract_images(picture_item, doc)[0]\nimage_obj = image.image\npage_number = image.metadata.page_number\nbbox = image.metadata.bbox\n</code></pre> Source code in <code>parsestudio/parsers/docling_parser.py</code> <pre><code>@staticmethod\ndef _extract_images(item: PictureItem, doc: DoclingDocument) -&gt; List[ImageElement]:\n    \"\"\"\n    Extract the images from the PictureItem object.\n\n    Args:\n        item (PictureItem): PictureItem object\n        doc (DoclingDocument): DoclingDocument object\n\n    Returns:\n        images (List[ImageElement]): List of ImageElement objects\n\n    Examples:\n    !!! example\n        ```python\n        parser = DoclingPDFParser()\n        image = parser._extract_images(picture_item, doc)[0]\n        image_obj = image.image\n        page_number = image.metadata.page_number\n        bbox = image.metadata.bbox\n        ``` \n    \"\"\"\n    image: Image.Image = item.get_image(doc)\n    if image is None:\n        return []\n    page_no = item.prov[0].page_no\n    bbox = item.prov[0].bbox\n    bbox = (bbox.l, bbox.t, bbox.r, bbox.b)\n    return [\n        ImageElement(\n            image=image,\n            metadata= Metadata(page_number=page_no, bbox=bbox)\n            )\n        ]\n</code></pre>"},{"location":"parsers/docling_parser/#parsestudio.parsers.docling_parser.DoclingPDFParser._extract_tables","title":"<code>_extract_tables(item)</code>  <code>staticmethod</code>","text":"<p>Extract the tables from the TableItem object.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>TableItem</code> <p>TableItem object</p> required <p>Returns:</p> Name Type Description <code>tables</code> <code>List[TableElement]</code> <p>List of TableElement objects</p> <p>Examples:</p> <p>Example</p> <pre><code>parser = DoclingPDFParser()\ntable = parser._extract_tables(table_item)[0]\ntable_md = table.markdown\ntable_df = table.dataframe\npage_number = table.metadata.page_number\nbbox = table.metadata.bbox\n</code></pre> Source code in <code>parsestudio/parsers/docling_parser.py</code> <pre><code>@staticmethod\ndef _extract_tables(item: TableItem) -&gt; List[TableElement]:\n    \"\"\"\n    Extract the tables from the TableItem object.\n\n    Args:\n        item (TableItem): TableItem object\n\n    Returns:\n        tables (List[TableElement]): List of TableElement objects\n\n    Examples:\n    !!! example\n        ```python\n        parser = DoclingPDFParser()\n        table = parser._extract_tables(table_item)[0]\n        table_md = table.markdown\n        table_df = table.dataframe\n        page_number = table.metadata.page_number\n        bbox = table.metadata.bbox\n        ```\n    \"\"\"\n    table_md: str = item.export_to_markdown()\n    table_df: pd.DataFrame = item.export_to_dataframe()\n\n    page_no = item.prov[0].page_no\n    bbox = item.prov[0].bbox\n    bbox = (bbox.l, bbox.t, bbox.r, bbox.b)\n\n    return [TableElement(\n        markdown=table_md,\n        dataframe=table_df,\n        metadata= Metadata(page_number=page_no, bbox=bbox)\n        )]\n</code></pre>"},{"location":"parsers/docling_parser/#parsestudio.parsers.docling_parser.DoclingPDFParser._extract_text","title":"<code>_extract_text(item, markdown_options)</code>","text":"<p>Extract the text from the DoclingDocument object.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>DoclingDocument</code> <p>DoclingDocument object</p> required <code>markdown_options</code> <code>dict</code> <p>Options to pass to the export_to_markdown method</p> required <p>Returns:</p> Name Type Description <code>text</code> <code>TextElement</code> <p>TextElement object</p> <p>Examples:</p> <p>Example</p> <pre><code>parser = DoclingPDFParser()\ntext = parser._extract_text(doc, markdown_options= {\n    \"image_mode\": ImageRefMode.EMBEDDED # embed the images in the markdown\n})\ntext = text.text\n</code></pre> Source code in <code>parsestudio/parsers/docling_parser.py</code> <pre><code>def _extract_text(\n        self, \n        item: DoclingDocument,\n        markdown_options: dict,\n        ) -&gt; TextElement:\n    \"\"\"\n    Extract the text from the DoclingDocument object.\n\n    Args:\n        item (DoclingDocument): DoclingDocument object\n        markdown_options (dict): Options to pass to the export_to_markdown method\n\n    Returns:\n        text (TextElement): TextElement object\n\n    Examples:\n    !!! example\n        ```python\n        parser = DoclingPDFParser()\n        text = parser._extract_text(doc, markdown_options= {\n            \"image_mode\": ImageRefMode.EMBEDDED # embed the images in the markdown\n        })\n        text = text.text\n        ```\n    \"\"\"\n    return TextElement(text=item.export_to_markdown(**markdown_options))\n</code></pre>"},{"location":"parsers/docling_parser/#parsestudio.parsers.docling_parser.DoclingPDFParser._validate_modalities","title":"<code>_validate_modalities(modalities)</code>","text":"<p>Validate the modalities provided by the user. The valid modalities are: [\"text\", \"tables\", \"images\"]</p> <p>Parameters:</p> Name Type Description Default <code>modalities</code> <code>List[str]</code> <p>List of modalities to validate</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the modality is not valid</p> Source code in <code>parsestudio/parsers/docling_parser.py</code> <pre><code>def _validate_modalities(self, modalities: List[str]) -&gt; None:\n    \"\"\"\n    Validate the modalities provided by the user. The valid modalities are: [\"text\", \"tables\", \"images\"]\n\n    Args:\n        modalities (List[str]): List of modalities to validate\n\n    Raises:\n        ValueError: If the modality is not valid\n    \"\"\"\n    valid_modalities = [\"text\", \"tables\", \"images\"]\n    for modality in modalities:\n        if modality not in valid_modalities:\n            raise ValueError(\n                f\"Invalid modality: {modality}. The valid modalities are: {valid_modalities}\"\n            )\n</code></pre>"},{"location":"parsers/docling_parser/#parsestudio.parsers.docling_parser.DoclingPDFParser.load_documents","title":"<code>load_documents(paths, raises_on_error=True, max_num_pages=sys.maxsize, max_file_size=sys.maxsize)</code>","text":"<p>Load the documents from the given paths and convert them to DoclingDocument objects.</p> <p>Parameters:</p> Name Type Description Default <code>paths</code> <code>List[str]</code> <p>List of paths to the documents</p> required <code>raises_on_error</code> <code>bool</code> <p>Whether to raise an error if the conversion fails. Default is True</p> <code>True</code> <code>max_num_pages</code> <code>int</code> <p>Maximum number of pages to convert. Default is sys.maxsize</p> <code>maxsize</code> <code>max_file_size</code> <code>int</code> <p>Maximum file size to convert. Default is sys.maxsize</p> <code>maxsize</code> <p>Returns:</p> Name Type Description <code>result</code> <code>Generator[ConversionResult, None, None]</code> <p>Generator of ConversionResult objects</p> Source code in <code>parsestudio/parsers/docling_parser.py</code> <pre><code>def load_documents(\n        self, \n        paths: List[str], \n        raises_on_error: bool = True,\n        max_num_pages: int = sys.maxsize,\n        max_file_size: int = sys.maxsize,\n    ) -&gt; Generator[ConversionResult, None, None]:\n    \"\"\"\n    Load the documents from the given paths and convert them to DoclingDocument objects.\n\n    Args:\n        paths (List[str]): List of paths to the documents\n        raises_on_error (bool): Whether to raise an error if the conversion fails. Default is True\n        max_num_pages (int): Maximum number of pages to convert. Default is sys.maxsize\n        max_file_size (int): Maximum file size to convert. Default is sys.maxsize\n\n    Returns:\n        result (Generator[ConversionResult, None, None]): Generator of ConversionResult objects\n    \"\"\"\n\n    yield from self.converter.convert_all(\n        paths,\n        raises_on_error=raises_on_error,\n        max_num_pages=max_num_pages,\n        max_file_size=max_file_size,\n    )\n</code></pre>"},{"location":"parsers/docling_parser/#parsestudio.parsers.docling_parser.DoclingPDFParser.parse","title":"<code>parse(paths, modalities=['text', 'tables', 'images'], **kwargs)</code>","text":"<p>Parse the documents and extract the specified modalities.</p> <p>Parameters:</p> Name Type Description Default <code>paths</code> <code>Union[str, List[str]]</code> <p>Path or list of paths to the documents</p> required <code>modalities</code> <code>List[str]</code> <p>List of modalities to extract. Default is [\"text\", \"tables\", \"images\"]</p> <code>['text', 'tables', 'images']</code> <code>**kwargs</code> <p>Keyword arguments to pass to the export_to_markdown method. For example, markdown_options={\"image_placeholder\": \"\"} <code>{}</code> <p>Returns:</p> Name Type Description <code>data</code> <code>List[ParserOutput]</code> <p>List of ParserOutput objects</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the modality is not valid</p> <p>Examples:</p> <p>Example</p> <pre><code>parser = DoclingPDFParser()\ndata = parser.parse(\"path/to/document.pdf\", modalities=[\"text\", \"tables\", \"images\"])\nprint(len(data)) \n# Output: 1\ntext = data[0].text # TextElement\ntables = data[0].tables # List of TableElement\nimages = data[0].images # List of ImageElement\n\n# Access the text\ntext = text.text\n\n\n# Access the first table\ntable = tables[0]\n# Access the markdown representation of the table\ntable_md = table.markdown\n# Access the dataframe representation of the table\ntable_df = table.dataframe\n# Access the metadata of the table\npage_number = table.metadata.page_number\nbbox = table.metadata.bbox\n\n# Access the first image\nimage = images[0]\n# Access the image object\nimage_obj = image.image # PIL Image object\n# Access the metadata of the image\npage_number = image.metadata.page_number\nbbox = image.metadata.bbox\n</code></pre> Source code in <code>parsestudio/parsers/docling_parser.py</code> <pre><code>def parse(\n        self,\n        paths: Union[str, List[str]],\n        modalities: List[str] = [\"text\", \"tables\", \"images\"],\n        **kwargs,\n    ) -&gt; List[ParserOutput]:\n    \"\"\"\n    Parse the documents and extract the specified modalities.\n\n    Args:\n        paths (Union[str, List[str]]): Path or list of paths to the documents\n        modalities (List[str]): List of modalities to extract. Default is [\"text\", \"tables\", \"images\"]\n        **kwargs: Keyword arguments to pass to the export_to_markdown method. For example, markdown_options={\"image_placeholder\": \"&lt;image&gt;\"}\n\n    Returns:\n        data (List[ParserOutput]): List of ParserOutput objects\n\n    Raises:\n        ValueError: If the modality is not valid\n\n    Examples:\n    !!! example\n        ```python\n        parser = DoclingPDFParser()\n        data = parser.parse(\"path/to/document.pdf\", modalities=[\"text\", \"tables\", \"images\"])\n        print(len(data)) \n        # Output: 1\n        text = data[0].text # TextElement\n        tables = data[0].tables # List of TableElement\n        images = data[0].images # List of ImageElement\n\n        # Access the text\n        text = text.text\n\n\n        # Access the first table\n        table = tables[0]\n        # Access the markdown representation of the table\n        table_md = table.markdown\n        # Access the dataframe representation of the table\n        table_df = table.dataframe\n        # Access the metadata of the table\n        page_number = table.metadata.page_number\n        bbox = table.metadata.bbox\n\n        # Access the first image\n        image = images[0]\n        # Access the image object\n        image_obj = image.image # PIL Image object\n        # Access the metadata of the image\n        page_number = image.metadata.page_number\n        bbox = image.metadata.bbox\n        ```\n    \"\"\"\n    self._validate_modalities(modalities)\n\n    if isinstance(paths, str):\n        paths = [paths]\n\n    markdown_options = kwargs.get(\"markdown_options\", {})\n\n    raises_on_error = kwargs.get(\"raises_on_error\", True)\n    max_num_pages = kwargs.get(\"max_num_pages\", sys.maxsize)\n    max_file_size = kwargs.get(\"max_file_size\", sys.maxsize)\n\n    data = []\n    for result in self.load_documents(paths, raises_on_error, max_num_pages, max_file_size):\n        if result.status == ConversionStatus.SUCCESS:\n            output = self.__export_result(result.document, modalities, markdown_options)\n\n            data.append(output)\n\n        else:\n            raise ValueError(f\"Failed to parse the document: {result.errors}\")\n    return data\n</code></pre>"},{"location":"parsers/llama_parser/","title":"The Llama Parser","text":"<p>The Llama parser uses llama under the hood to parse pdfs and extract text from them. It is a simple wrapper around the llama library that provides a more user-friendly interface.</p>"},{"location":"parsers/llama_parser/#documentation","title":"Documentation","text":""},{"location":"parsers/llama_parser/#parsestudio.parsers.llama_parser.LlamaPDFParser","title":"<code>LlamaPDFParser</code>","text":"<p>Parse a PDF file using the LlamaParse library.</p> <p>Parameters:</p> Name Type Description Default <code>llama_options</code> <code>Optional[Dict]</code> <p>A dictionary containing the options for the LlamaParse converter.</p> <code>{'show_progress': True, 'ignore_errors': False, 'split_by_page': False, 'invalidate_cache': False, 'do_not_cache': False, 'result_type': 'markdown', 'continuous_mode': True, 'take_screenshot': True, 'disable_ocr': False, 'is_formatting_instruction': False, 'premium_mode': True, 'verbose': False}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>An error occurred while initializing the LlamaParse converter.</p> Source code in <code>parsestudio/parsers/llama_parser.py</code> <pre><code>class LlamaPDFParser:\n    \"\"\"\n    Parse a PDF file using the LlamaParse library.\n\n    Args:\n        llama_options (Optional[Dict], optional): A dictionary containing the options for the LlamaParse converter.\n\n    Raises:\n        ValueError: An error occurred while initializing the LlamaParse converter.\n    \"\"\"\n    def __init__(\n            self,\n            llama_options: Optional[Dict] = {\n                \"show_progress\": True,\n                \"ignore_errors\": False,\n                \"split_by_page\": False,\n                \"invalidate_cache\": False,\n                \"do_not_cache\": False,\n                \"result_type\": \"markdown\",\n                \"continuous_mode\": True,\n                \"take_screenshot\": True,\n                \"disable_ocr\": False,\n                \"is_formatting_instruction\": False,\n                \"premium_mode\": True,\n                \"verbose\": False\n            }\n            ):\n\n        try:\n            self.converter = LlamaParse(\n                api_key=os.environ.get(\"LLAMA_PARSE_KEY\"),\n                **llama_options\n            )\n\n        except Exception as e:\n            raise ValueError(\n                f\"An error occurred while initializing the LlamaParse converter: {e}\"\n            )\n\n    def load_documents(self, paths: List[str]) -&gt; Generator[Dict, None, None]:\n        \"\"\"\n        Load the documents from the given paths and yield the JSON result.\n\n        Args:\n            paths (List[str]): A list of paths to the PDF files.\n\n        Yields:\n            result (Generator[Dict, None, None]): A generator that yields the JSON result of the document.\n        \"\"\"\n\n        document: List[Dict] = self.converter.get_json_result(paths)\n        yield from document\n\n    def _validate_modalities(self, modalities: List[str]) -&gt; None:\n        \"\"\"\n        Validate the modalities provided by the user. The valid modalities are: [\"text\", \"tables\", \"images\"]\n\n        Args:\n            modalities (List[str]): List of modalities to validate\n\n        Raises:\n            ValueError: If the modality is not valid\n        \"\"\"\n        valid_modalities = [\"text\", \"tables\", \"images\"]\n        for modality in modalities:\n            if modality not in valid_modalities:\n                raise ValueError(\n                    f\"Invalid modality: {modality}. The valid modalities are: {valid_modalities}\"\n                )\n\n    def parse(\n            self,\n            paths: Union[str, List[str]],\n            modalities: List[str] = [\"text\", \"tables\", \"images\"],\n        ) -&gt; List[ParserOutput]:\n        \"\"\"\n        Parse the PDF file and return the extracted the specified modalities.\n\n        Args:\n            paths (Union[str, List[str]]): A path or a list of paths to the PDF files.\n            modalities (List[str], optional): List of modalities to extract. Defaults to [\"text\", \"tables\", \"images\"].\n\n        Returns:\n            data (List[ParserOutput]): A list of ParserOutput objects containing the extracted modalities.\n\n        Raises:\n            ValueError: If the modality is not valid\n\n        Example:\n        !!! example\n            ```python\n            parser = LlamaPDFParser()\n            data = parser.parse(\"path/to/file.pdf\", modalities=[\"text\", \"tables\", \"images\"])\n            print(len(data)) \n            # Output: 1\n            text = data[0].text # TextElement\n            tables = data[0].tables # List of TableElement\n            images = data[0].images # List of ImageElement\n\n            # Access the text\n            text = text.text\n\n\n            # Access the first table\n            table = tables[0]\n            # Access the markdown representation of the table\n            table_md = table.markdown\n            # Access the dataframe representation of the table\n            table_df = table.dataframe\n            # Access the metadata of the table\n            page_number = table.metadata.page_number\n            bbox = table.metadata.bbox\n\n            # Access the first image\n            image = images[0]\n            # Access the image object\n            image_obj = image.image # PIL Image object\n            # Access the metadata of the image\n            page_number = image.metadata.page_number\n            bbox = image.metadata.bbox \n            ```\n        \"\"\"\n        self._validate_modalities(modalities)\n\n        if isinstance(paths, str):\n            paths = [paths]\n\n        data = []\n        for result in self.load_documents(paths):\n            output = self.__export_result(result, modalities)\n            data.append(output)\n\n        return data\n\n    def __export_result(\n            self, \n            json_result: dict, \n            modalities: List[str]\n        ) -&gt; ParserOutput:\n        \"\"\"\n        Export the result to the ParserOutput object.\n\n        Args:\n            json_result (dict): The JSON result of the document.\n            modalities (List[str]): List of modalities to extract.\n\n        Returns:\n            output (ParserOutput): The ParserOutput object containing the extracted modalities.\n        \"\"\"\n        text = TextElement(text=\"\")\n        tables: List[TableElement] = []\n        images: List[ImageElement] = []\n\n        job_id: str = json_result[\"job_id\"]\n        pages: List[Dict] = json_result[\"pages\"]\n\n        for page in pages:\n            if \"text\" in modalities:\n                text.text += self._extract_text(page).text + \"\\n\"\n\n            if \"tables\" in modalities:\n                tables += self._extract_tables(page)\n\n            if \"images\" in modalities:\n                images += self._extract_images(page, job_id)\n\n        return ParserOutput(text=text, tables=tables, images=images)\n\n    @staticmethod\n    def _extract_text(page: Dict) -&gt; TextElement:\n        \"\"\"\n        Extract the text from the page dict.\n\n        Args:\n            page (Dict): A dictionary containing the page information.\n\n        Returns:\n            text (TextElement): TextElement object\n\n        Examples:\n        !!! example\n            ```python\n            parser = LlamaPDFParser()\n            text = parser._extract_text(page)\n            text = text.text\n            ```\n        \"\"\"\n        return TextElement(text=page[\"text\"])\n\n    @staticmethod\n    def _extract_tables(page: Dict) -&gt; List[TableElement]:\n        \"\"\"\n        Extract the tables from the page dict.\n\n        Args:\n            page (Dict): A dictionary containing the page information.\n\n        Returns:\n            tables (List[TableElement]): List of TableElement objects\n\n        Examples:\n        !!! example\n            ```python\n            parser = LlamaPDFParser()\n            table = parser._extract_tables(table_item)[0]\n            table_md = table.markdown\n            table_df = table.dataframe\n            page_number = table.metadata.page_number\n            bbox = table.metadata.bbox\n            ```\n        \"\"\"\n        tables: List[TableElement] = []\n        for item in page[\"items\"]:\n            if item[\"type\"] == \"table\":\n                table_md = item[\"md\"]\n                try:\n                    table_df = pd.read_csv(io.StringIO(item[\"csv\"]), sep=\",\")\n                except Exception as e:\n                    print(f\"Error converting table {table_md} to dataframe: {e}\")\n                    table_df = None\n\n                tables.append(\n                    TableElement(\n                        markdown=table_md, \n                        dataframe=table_df, \n                        metadata=Metadata(page_number=page[\"page\"])\n                    )\n                )\n        return tables\n\n    def _extract_images(self, page: Dict, job_id: str) -&gt; List[ImageElement]:\n        \"\"\"\n        Extract the images from the page dict.\n\n        Args:\n            page (Dict): A dictionary containing the page information.\n            job_id (str): The job_id of the document.\n\n        Returns:\n            images (List[ImageElement]): List of ImageElement objects\n\n        Examples:\n        !!! example\n            ```python\n            parser = LlamaPDFParser()\n            image = parser._extract_images(page, job_id)[0]\n            image_obj = image.image\n            page_number = image.metadata.page_number\n            bbox = image.metadata.bbox\n            ```\n        \"\"\"\n        images: List[ImageElement] = []\n        image_dicts = self.converter.get_images([{\n            \"job_id\": job_id,\n            \"pages\": [page]\n            }], download_path=\"llama_images\")\n        for img in image_dicts:\n            image_path = img[\"path\"]\n            image = Image.open(image_path).convert(\"RGB\")\n            images.append(\n                ImageElement(\n                    image=image, \n                    metadata=Metadata(page_number=page[\"page\"])\n                    )\n                )\n            os.remove(image_path)\n        return images\n</code></pre>"},{"location":"parsers/llama_parser/#parsestudio.parsers.llama_parser.LlamaPDFParser.__export_result","title":"<code>__export_result(json_result, modalities)</code>","text":"<p>Export the result to the ParserOutput object.</p> <p>Parameters:</p> Name Type Description Default <code>json_result</code> <code>dict</code> <p>The JSON result of the document.</p> required <code>modalities</code> <code>List[str]</code> <p>List of modalities to extract.</p> required <p>Returns:</p> Name Type Description <code>output</code> <code>ParserOutput</code> <p>The ParserOutput object containing the extracted modalities.</p> Source code in <code>parsestudio/parsers/llama_parser.py</code> <pre><code>def __export_result(\n        self, \n        json_result: dict, \n        modalities: List[str]\n    ) -&gt; ParserOutput:\n    \"\"\"\n    Export the result to the ParserOutput object.\n\n    Args:\n        json_result (dict): The JSON result of the document.\n        modalities (List[str]): List of modalities to extract.\n\n    Returns:\n        output (ParserOutput): The ParserOutput object containing the extracted modalities.\n    \"\"\"\n    text = TextElement(text=\"\")\n    tables: List[TableElement] = []\n    images: List[ImageElement] = []\n\n    job_id: str = json_result[\"job_id\"]\n    pages: List[Dict] = json_result[\"pages\"]\n\n    for page in pages:\n        if \"text\" in modalities:\n            text.text += self._extract_text(page).text + \"\\n\"\n\n        if \"tables\" in modalities:\n            tables += self._extract_tables(page)\n\n        if \"images\" in modalities:\n            images += self._extract_images(page, job_id)\n\n    return ParserOutput(text=text, tables=tables, images=images)\n</code></pre>"},{"location":"parsers/llama_parser/#parsestudio.parsers.llama_parser.LlamaPDFParser._extract_images","title":"<code>_extract_images(page, job_id)</code>","text":"<p>Extract the images from the page dict.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>Dict</code> <p>A dictionary containing the page information.</p> required <code>job_id</code> <code>str</code> <p>The job_id of the document.</p> required <p>Returns:</p> Name Type Description <code>images</code> <code>List[ImageElement]</code> <p>List of ImageElement objects</p> <p>Examples:</p> <p>Example</p> <pre><code>parser = LlamaPDFParser()\nimage = parser._extract_images(page, job_id)[0]\nimage_obj = image.image\npage_number = image.metadata.page_number\nbbox = image.metadata.bbox\n</code></pre> Source code in <code>parsestudio/parsers/llama_parser.py</code> <pre><code>def _extract_images(self, page: Dict, job_id: str) -&gt; List[ImageElement]:\n    \"\"\"\n    Extract the images from the page dict.\n\n    Args:\n        page (Dict): A dictionary containing the page information.\n        job_id (str): The job_id of the document.\n\n    Returns:\n        images (List[ImageElement]): List of ImageElement objects\n\n    Examples:\n    !!! example\n        ```python\n        parser = LlamaPDFParser()\n        image = parser._extract_images(page, job_id)[0]\n        image_obj = image.image\n        page_number = image.metadata.page_number\n        bbox = image.metadata.bbox\n        ```\n    \"\"\"\n    images: List[ImageElement] = []\n    image_dicts = self.converter.get_images([{\n        \"job_id\": job_id,\n        \"pages\": [page]\n        }], download_path=\"llama_images\")\n    for img in image_dicts:\n        image_path = img[\"path\"]\n        image = Image.open(image_path).convert(\"RGB\")\n        images.append(\n            ImageElement(\n                image=image, \n                metadata=Metadata(page_number=page[\"page\"])\n                )\n            )\n        os.remove(image_path)\n    return images\n</code></pre>"},{"location":"parsers/llama_parser/#parsestudio.parsers.llama_parser.LlamaPDFParser._extract_tables","title":"<code>_extract_tables(page)</code>  <code>staticmethod</code>","text":"<p>Extract the tables from the page dict.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>Dict</code> <p>A dictionary containing the page information.</p> required <p>Returns:</p> Name Type Description <code>tables</code> <code>List[TableElement]</code> <p>List of TableElement objects</p> <p>Examples:</p> <p>Example</p> <pre><code>parser = LlamaPDFParser()\ntable = parser._extract_tables(table_item)[0]\ntable_md = table.markdown\ntable_df = table.dataframe\npage_number = table.metadata.page_number\nbbox = table.metadata.bbox\n</code></pre> Source code in <code>parsestudio/parsers/llama_parser.py</code> <pre><code>@staticmethod\ndef _extract_tables(page: Dict) -&gt; List[TableElement]:\n    \"\"\"\n    Extract the tables from the page dict.\n\n    Args:\n        page (Dict): A dictionary containing the page information.\n\n    Returns:\n        tables (List[TableElement]): List of TableElement objects\n\n    Examples:\n    !!! example\n        ```python\n        parser = LlamaPDFParser()\n        table = parser._extract_tables(table_item)[0]\n        table_md = table.markdown\n        table_df = table.dataframe\n        page_number = table.metadata.page_number\n        bbox = table.metadata.bbox\n        ```\n    \"\"\"\n    tables: List[TableElement] = []\n    for item in page[\"items\"]:\n        if item[\"type\"] == \"table\":\n            table_md = item[\"md\"]\n            try:\n                table_df = pd.read_csv(io.StringIO(item[\"csv\"]), sep=\",\")\n            except Exception as e:\n                print(f\"Error converting table {table_md} to dataframe: {e}\")\n                table_df = None\n\n            tables.append(\n                TableElement(\n                    markdown=table_md, \n                    dataframe=table_df, \n                    metadata=Metadata(page_number=page[\"page\"])\n                )\n            )\n    return tables\n</code></pre>"},{"location":"parsers/llama_parser/#parsestudio.parsers.llama_parser.LlamaPDFParser._extract_text","title":"<code>_extract_text(page)</code>  <code>staticmethod</code>","text":"<p>Extract the text from the page dict.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>Dict</code> <p>A dictionary containing the page information.</p> required <p>Returns:</p> Name Type Description <code>text</code> <code>TextElement</code> <p>TextElement object</p> <p>Examples:</p> <p>Example</p> <pre><code>parser = LlamaPDFParser()\ntext = parser._extract_text(page)\ntext = text.text\n</code></pre> Source code in <code>parsestudio/parsers/llama_parser.py</code> <pre><code>@staticmethod\ndef _extract_text(page: Dict) -&gt; TextElement:\n    \"\"\"\n    Extract the text from the page dict.\n\n    Args:\n        page (Dict): A dictionary containing the page information.\n\n    Returns:\n        text (TextElement): TextElement object\n\n    Examples:\n    !!! example\n        ```python\n        parser = LlamaPDFParser()\n        text = parser._extract_text(page)\n        text = text.text\n        ```\n    \"\"\"\n    return TextElement(text=page[\"text\"])\n</code></pre>"},{"location":"parsers/llama_parser/#parsestudio.parsers.llama_parser.LlamaPDFParser._validate_modalities","title":"<code>_validate_modalities(modalities)</code>","text":"<p>Validate the modalities provided by the user. The valid modalities are: [\"text\", \"tables\", \"images\"]</p> <p>Parameters:</p> Name Type Description Default <code>modalities</code> <code>List[str]</code> <p>List of modalities to validate</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the modality is not valid</p> Source code in <code>parsestudio/parsers/llama_parser.py</code> <pre><code>def _validate_modalities(self, modalities: List[str]) -&gt; None:\n    \"\"\"\n    Validate the modalities provided by the user. The valid modalities are: [\"text\", \"tables\", \"images\"]\n\n    Args:\n        modalities (List[str]): List of modalities to validate\n\n    Raises:\n        ValueError: If the modality is not valid\n    \"\"\"\n    valid_modalities = [\"text\", \"tables\", \"images\"]\n    for modality in modalities:\n        if modality not in valid_modalities:\n            raise ValueError(\n                f\"Invalid modality: {modality}. The valid modalities are: {valid_modalities}\"\n            )\n</code></pre>"},{"location":"parsers/llama_parser/#parsestudio.parsers.llama_parser.LlamaPDFParser.load_documents","title":"<code>load_documents(paths)</code>","text":"<p>Load the documents from the given paths and yield the JSON result.</p> <p>Parameters:</p> Name Type Description Default <code>paths</code> <code>List[str]</code> <p>A list of paths to the PDF files.</p> required <p>Yields:</p> Name Type Description <code>result</code> <code>Generator[Dict, None, None]</code> <p>A generator that yields the JSON result of the document.</p> Source code in <code>parsestudio/parsers/llama_parser.py</code> <pre><code>def load_documents(self, paths: List[str]) -&gt; Generator[Dict, None, None]:\n    \"\"\"\n    Load the documents from the given paths and yield the JSON result.\n\n    Args:\n        paths (List[str]): A list of paths to the PDF files.\n\n    Yields:\n        result (Generator[Dict, None, None]): A generator that yields the JSON result of the document.\n    \"\"\"\n\n    document: List[Dict] = self.converter.get_json_result(paths)\n    yield from document\n</code></pre>"},{"location":"parsers/llama_parser/#parsestudio.parsers.llama_parser.LlamaPDFParser.parse","title":"<code>parse(paths, modalities=['text', 'tables', 'images'])</code>","text":"<p>Parse the PDF file and return the extracted the specified modalities.</p> <p>Parameters:</p> Name Type Description Default <code>paths</code> <code>Union[str, List[str]]</code> <p>A path or a list of paths to the PDF files.</p> required <code>modalities</code> <code>List[str]</code> <p>List of modalities to extract. Defaults to [\"text\", \"tables\", \"images\"].</p> <code>['text', 'tables', 'images']</code> <p>Returns:</p> Name Type Description <code>data</code> <code>List[ParserOutput]</code> <p>A list of ParserOutput objects containing the extracted modalities.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the modality is not valid</p> <p>Example:</p> <p>Example</p> <pre><code>parser = LlamaPDFParser()\ndata = parser.parse(\"path/to/file.pdf\", modalities=[\"text\", \"tables\", \"images\"])\nprint(len(data)) \n# Output: 1\ntext = data[0].text # TextElement\ntables = data[0].tables # List of TableElement\nimages = data[0].images # List of ImageElement\n\n# Access the text\ntext = text.text\n\n\n# Access the first table\ntable = tables[0]\n# Access the markdown representation of the table\ntable_md = table.markdown\n# Access the dataframe representation of the table\ntable_df = table.dataframe\n# Access the metadata of the table\npage_number = table.metadata.page_number\nbbox = table.metadata.bbox\n\n# Access the first image\nimage = images[0]\n# Access the image object\nimage_obj = image.image # PIL Image object\n# Access the metadata of the image\npage_number = image.metadata.page_number\nbbox = image.metadata.bbox \n</code></pre> Source code in <code>parsestudio/parsers/llama_parser.py</code> <pre><code>def parse(\n        self,\n        paths: Union[str, List[str]],\n        modalities: List[str] = [\"text\", \"tables\", \"images\"],\n    ) -&gt; List[ParserOutput]:\n    \"\"\"\n    Parse the PDF file and return the extracted the specified modalities.\n\n    Args:\n        paths (Union[str, List[str]]): A path or a list of paths to the PDF files.\n        modalities (List[str], optional): List of modalities to extract. Defaults to [\"text\", \"tables\", \"images\"].\n\n    Returns:\n        data (List[ParserOutput]): A list of ParserOutput objects containing the extracted modalities.\n\n    Raises:\n        ValueError: If the modality is not valid\n\n    Example:\n    !!! example\n        ```python\n        parser = LlamaPDFParser()\n        data = parser.parse(\"path/to/file.pdf\", modalities=[\"text\", \"tables\", \"images\"])\n        print(len(data)) \n        # Output: 1\n        text = data[0].text # TextElement\n        tables = data[0].tables # List of TableElement\n        images = data[0].images # List of ImageElement\n\n        # Access the text\n        text = text.text\n\n\n        # Access the first table\n        table = tables[0]\n        # Access the markdown representation of the table\n        table_md = table.markdown\n        # Access the dataframe representation of the table\n        table_df = table.dataframe\n        # Access the metadata of the table\n        page_number = table.metadata.page_number\n        bbox = table.metadata.bbox\n\n        # Access the first image\n        image = images[0]\n        # Access the image object\n        image_obj = image.image # PIL Image object\n        # Access the metadata of the image\n        page_number = image.metadata.page_number\n        bbox = image.metadata.bbox \n        ```\n    \"\"\"\n    self._validate_modalities(modalities)\n\n    if isinstance(paths, str):\n        paths = [paths]\n\n    data = []\n    for result in self.load_documents(paths):\n        output = self.__export_result(result, modalities)\n        data.append(output)\n\n    return data\n</code></pre>"},{"location":"parsers/pymupdf_parser/","title":"The PymuPDF Parser","text":"<p>The PymuPDF parser uses pymupdf under the hood to parse pdfs and extract text from them. It is a simple wrapper around the pymupdf library that provides a more user-friendly interface.</p>"},{"location":"parsers/pymupdf_parser/#documentation","title":"Documentation","text":""},{"location":"parsers/pymupdf_parser/#parsestudio.parsers.pymupdf_parser.PyMuPDFParser","title":"<code>PyMuPDFParser</code>","text":"<p>Parse a PDF file using PyMuPDF parser.</p> Source code in <code>parsestudio/parsers/pymupdf_parser.py</code> <pre><code>class PyMuPDFParser:\n    \"\"\"\n    Parse a PDF file using PyMuPDF parser.\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def load_documents(paths: List[str]) -&gt; Generator[List[Page], None, None]:\n        \"\"\"\n        Load the documents from the given paths.\n\n        Args:\n            paths (List[str]): List of paths to the PDF files.\n\n        Returns:\n            result (Generator[List[Page], None, None]): A generator that yields a list of pages for each document\n        \"\"\"\n        for path in paths:\n            with fitz.open(path) as doc:\n                pages = [doc.load_page(page_num) for page_num in range(doc.page_count)]\n                yield pages\n\n    def _validate_modalities(self, modalities: List[str]) -&gt; None:\n        \"\"\"\n        Validate the modalities provided by the user. The valid modalities are: [\"text\", \"tables\", \"images\"]\n\n        Args:\n            modalities (List[str]): List of modalities to validate\n\n        Raises:\n            ValueError: If the modality is not valid\n        \"\"\"\n        valid_modalities = [\"text\", \"tables\", \"images\"]\n        for modality in modalities:\n            if modality not in valid_modalities:\n                raise ValueError(\n                    f\"Invalid modality: {modality}. The valid modalities are: {valid_modalities}\"\n                )\n\n    def parse(\n        self,\n        paths: Union[str, List[str]],\n        modalities: List[str] = [\"text\", \"tables\", \"images\"],\n    ) -&gt; List[ParserOutput]:\n        \"\"\"\n        Parse the PDF file and return the extracted the specified modalities.\n\n        Args:\n            paths (Union[str, List[str]]): A path or a list of paths to the PDF files.\n            modalities (List[str], optional): List of modalities to extract. Defaults to [\"text\", \"tables\", \"images\"].\n\n        Returns:\n            data (List[ParserOutput]): A list of ParserOutput objects containing the extracted modalities.\n\n        Raises:\n            ValueError: If the modality is not valid\n\n        Example:\n        !!! example\n            ```python\n            parser = PyMuPDFParser()\n            data = parser.parse(\"path/to/file.pdf\", modalities=[\"text\", \"tables\", \"images\"])\n            print(len(data)) \n            # Output: 1\n            text = data[0].text # TextElement\n            tables = data[0].tables # List of TableElement\n            images = data[0].images # List of ImageElement\n\n            # Access the text\n            text = text.text\n\n\n            # Access the first table\n            table = tables[0]\n            # Access the markdown representation of the table\n            table_md = table.markdown\n            # Access the dataframe representation of the table\n            table_df = table.dataframe\n            # Access the metadata of the table\n            page_number = table.metadata.page_number\n            bbox = table.metadata.bbox\n\n            # Access the first image\n            image = images[0]\n            # Access the image object\n            image_obj = image.image # PIL Image object\n            # Access the metadata of the image\n            page_number = image.metadata.page_number\n            bbox = image.metadata.bbox \n            ```\n        \"\"\"\n        self._validate_modalities(modalities)\n\n        if isinstance(paths, str):\n            paths = [paths]\n\n        data = []\n        for result in self.load_documents(paths):\n            output = self.__export_result(result, modalities)\n\n            data.append(output)\n\n        return data\n\n    def __export_result(self, pages: List[Page], modalities: List[str]) -&gt; ParserOutput:\n        \"\"\"\n        Export the result of the parsing process.\n\n        Args:\n            pages (List[Page]): List of pages\n            modalities (List[str]): List of modalities to extract\n\n        Returns:\n            output (ParserOutput): The ParserOutput object containing the extracted modalities.\n        \"\"\"\n        text = TextElement(text=\"\")\n        tables: List[TableElement] = []\n        images: List[ImageElement] = []\n\n        for page in pages:\n            if \"text\" in modalities:\n                text.text += self._extract_text(page).text + \"\\n\"\n\n            if \"tables\" in modalities:\n                tables += self._extract_tables(page)\n\n            if \"images\" in modalities:\n                images += self._extract_images(page)\n\n        return ParserOutput(text=text, tables=tables, images=images)\n\n    @staticmethod\n    def _extract_text(page: Page) -&gt; TextElement:\n        \"\"\"\n        Extract the text from the page.\n\n        Args:\n            page (Page): The page object\n\n        Returns:\n            text (TextElement): The extracted text element\n\n        Example:\n        !!! example\n            ```python\n            parser = PyMuPDFParser()\n            with fitz.open(\"path/to/file.pdf\") as doc:\n                page = doc.load_page(0)\n                text = parser._extract_text(page)\n                print(text.text)\n\n            # Output: 'Hello, World!'\n            ```\n        \"\"\"\n        return TextElement(text=page.get_text(\"text\"))\n\n    @staticmethod\n    def _extract_images(page: Page) -&gt; List[ImageElement]:\n        \"\"\"\n        Extract the images from the page.\n\n        Args:\n            page (Page): The page object\n\n        Returns:\n            images (List[ImageElement]): List of ImageElement objects\n\n        Example:\n        !!! example\n            ```python\n            parser = PyMuPDFParser()\n            with fitz.open(\"path/to/file.pdf\") as doc:\n                page = doc.load_page(0)\n                images = parser._extract_images(page)\n                image = images[0]\n                image_obj = image.image\n                page_number = image.metadata.page_number\n                bbox = image.metadata.bbox\n            ```\n        \"\"\"\n        images: List[ImageElement] = []\n        for img in page.get_images(full=True):\n            xref = img[0]\n            base_image = page.parent.extract_image(xref)\n            img_data = BytesIO(base_image[\"image\"])\n            image = Image.open(img_data).convert(\"RGB\")\n            images.append(ImageElement(image=image, metadata=Metadata(page_number=page.number + 1)))\n        return images\n\n    @staticmethod\n    def _extract_tables(page: Page) -&gt; List[TableElement]:\n        \"\"\"\n        Extract the tables from the page.\n\n        Args:\n            page (Page): The page object\n\n        Returns:\n            tables (List[TableElement]): List of TableElement objects\n\n        Example:\n        !!! example\n            ```python\n            parser = PyMuPDFParser()\n            with fitz.open(\"path/to/file.pdf\") as doc:\n                page = doc.load_page(0)\n                tables = parser._extract_tables(page)\n                table = tables[0]\n                table_md = table.markdown\n                table_df = table.dataframe\n                page_number = table.metadata.page_number\n                bbox = table.metadata.bbox\n            ```\n        \"\"\"\n        tabs = page.find_tables()\n\n        tables: List[TableElement] = []\n        for tab in tabs:\n            tables.append(\n                TableElement(\n                    markdown=tab.to_markdown(),\n                    dataframe=tab.to_pandas(),\n                    metadata=Metadata(page_number=page.number + 1),\n                )\n            )\n\n        return tables\n</code></pre>"},{"location":"parsers/pymupdf_parser/#parsestudio.parsers.pymupdf_parser.PyMuPDFParser.__export_result","title":"<code>__export_result(pages, modalities)</code>","text":"<p>Export the result of the parsing process.</p> <p>Parameters:</p> Name Type Description Default <code>pages</code> <code>List[Page]</code> <p>List of pages</p> required <code>modalities</code> <code>List[str]</code> <p>List of modalities to extract</p> required <p>Returns:</p> Name Type Description <code>output</code> <code>ParserOutput</code> <p>The ParserOutput object containing the extracted modalities.</p> Source code in <code>parsestudio/parsers/pymupdf_parser.py</code> <pre><code>def __export_result(self, pages: List[Page], modalities: List[str]) -&gt; ParserOutput:\n    \"\"\"\n    Export the result of the parsing process.\n\n    Args:\n        pages (List[Page]): List of pages\n        modalities (List[str]): List of modalities to extract\n\n    Returns:\n        output (ParserOutput): The ParserOutput object containing the extracted modalities.\n    \"\"\"\n    text = TextElement(text=\"\")\n    tables: List[TableElement] = []\n    images: List[ImageElement] = []\n\n    for page in pages:\n        if \"text\" in modalities:\n            text.text += self._extract_text(page).text + \"\\n\"\n\n        if \"tables\" in modalities:\n            tables += self._extract_tables(page)\n\n        if \"images\" in modalities:\n            images += self._extract_images(page)\n\n    return ParserOutput(text=text, tables=tables, images=images)\n</code></pre>"},{"location":"parsers/pymupdf_parser/#parsestudio.parsers.pymupdf_parser.PyMuPDFParser._extract_images","title":"<code>_extract_images(page)</code>  <code>staticmethod</code>","text":"<p>Extract the images from the page.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>Page</code> <p>The page object</p> required <p>Returns:</p> Name Type Description <code>images</code> <code>List[ImageElement]</code> <p>List of ImageElement objects</p> <p>Example:</p> <p>Example</p> <pre><code>parser = PyMuPDFParser()\nwith fitz.open(\"path/to/file.pdf\") as doc:\n    page = doc.load_page(0)\n    images = parser._extract_images(page)\n    image = images[0]\n    image_obj = image.image\n    page_number = image.metadata.page_number\n    bbox = image.metadata.bbox\n</code></pre> Source code in <code>parsestudio/parsers/pymupdf_parser.py</code> <pre><code>@staticmethod\ndef _extract_images(page: Page) -&gt; List[ImageElement]:\n    \"\"\"\n    Extract the images from the page.\n\n    Args:\n        page (Page): The page object\n\n    Returns:\n        images (List[ImageElement]): List of ImageElement objects\n\n    Example:\n    !!! example\n        ```python\n        parser = PyMuPDFParser()\n        with fitz.open(\"path/to/file.pdf\") as doc:\n            page = doc.load_page(0)\n            images = parser._extract_images(page)\n            image = images[0]\n            image_obj = image.image\n            page_number = image.metadata.page_number\n            bbox = image.metadata.bbox\n        ```\n    \"\"\"\n    images: List[ImageElement] = []\n    for img in page.get_images(full=True):\n        xref = img[0]\n        base_image = page.parent.extract_image(xref)\n        img_data = BytesIO(base_image[\"image\"])\n        image = Image.open(img_data).convert(\"RGB\")\n        images.append(ImageElement(image=image, metadata=Metadata(page_number=page.number + 1)))\n    return images\n</code></pre>"},{"location":"parsers/pymupdf_parser/#parsestudio.parsers.pymupdf_parser.PyMuPDFParser._extract_tables","title":"<code>_extract_tables(page)</code>  <code>staticmethod</code>","text":"<p>Extract the tables from the page.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>Page</code> <p>The page object</p> required <p>Returns:</p> Name Type Description <code>tables</code> <code>List[TableElement]</code> <p>List of TableElement objects</p> <p>Example:</p> <p>Example</p> <pre><code>parser = PyMuPDFParser()\nwith fitz.open(\"path/to/file.pdf\") as doc:\n    page = doc.load_page(0)\n    tables = parser._extract_tables(page)\n    table = tables[0]\n    table_md = table.markdown\n    table_df = table.dataframe\n    page_number = table.metadata.page_number\n    bbox = table.metadata.bbox\n</code></pre> Source code in <code>parsestudio/parsers/pymupdf_parser.py</code> <pre><code>@staticmethod\ndef _extract_tables(page: Page) -&gt; List[TableElement]:\n    \"\"\"\n    Extract the tables from the page.\n\n    Args:\n        page (Page): The page object\n\n    Returns:\n        tables (List[TableElement]): List of TableElement objects\n\n    Example:\n    !!! example\n        ```python\n        parser = PyMuPDFParser()\n        with fitz.open(\"path/to/file.pdf\") as doc:\n            page = doc.load_page(0)\n            tables = parser._extract_tables(page)\n            table = tables[0]\n            table_md = table.markdown\n            table_df = table.dataframe\n            page_number = table.metadata.page_number\n            bbox = table.metadata.bbox\n        ```\n    \"\"\"\n    tabs = page.find_tables()\n\n    tables: List[TableElement] = []\n    for tab in tabs:\n        tables.append(\n            TableElement(\n                markdown=tab.to_markdown(),\n                dataframe=tab.to_pandas(),\n                metadata=Metadata(page_number=page.number + 1),\n            )\n        )\n\n    return tables\n</code></pre>"},{"location":"parsers/pymupdf_parser/#parsestudio.parsers.pymupdf_parser.PyMuPDFParser._extract_text","title":"<code>_extract_text(page)</code>  <code>staticmethod</code>","text":"<p>Extract the text from the page.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>Page</code> <p>The page object</p> required <p>Returns:</p> Name Type Description <code>text</code> <code>TextElement</code> <p>The extracted text element</p> <p>Example:</p> <p>Example</p> <pre><code>parser = PyMuPDFParser()\nwith fitz.open(\"path/to/file.pdf\") as doc:\n    page = doc.load_page(0)\n    text = parser._extract_text(page)\n    print(text.text)\n\n# Output: 'Hello, World!'\n</code></pre> Source code in <code>parsestudio/parsers/pymupdf_parser.py</code> <pre><code>@staticmethod\ndef _extract_text(page: Page) -&gt; TextElement:\n    \"\"\"\n    Extract the text from the page.\n\n    Args:\n        page (Page): The page object\n\n    Returns:\n        text (TextElement): The extracted text element\n\n    Example:\n    !!! example\n        ```python\n        parser = PyMuPDFParser()\n        with fitz.open(\"path/to/file.pdf\") as doc:\n            page = doc.load_page(0)\n            text = parser._extract_text(page)\n            print(text.text)\n\n        # Output: 'Hello, World!'\n        ```\n    \"\"\"\n    return TextElement(text=page.get_text(\"text\"))\n</code></pre>"},{"location":"parsers/pymupdf_parser/#parsestudio.parsers.pymupdf_parser.PyMuPDFParser._validate_modalities","title":"<code>_validate_modalities(modalities)</code>","text":"<p>Validate the modalities provided by the user. The valid modalities are: [\"text\", \"tables\", \"images\"]</p> <p>Parameters:</p> Name Type Description Default <code>modalities</code> <code>List[str]</code> <p>List of modalities to validate</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the modality is not valid</p> Source code in <code>parsestudio/parsers/pymupdf_parser.py</code> <pre><code>def _validate_modalities(self, modalities: List[str]) -&gt; None:\n    \"\"\"\n    Validate the modalities provided by the user. The valid modalities are: [\"text\", \"tables\", \"images\"]\n\n    Args:\n        modalities (List[str]): List of modalities to validate\n\n    Raises:\n        ValueError: If the modality is not valid\n    \"\"\"\n    valid_modalities = [\"text\", \"tables\", \"images\"]\n    for modality in modalities:\n        if modality not in valid_modalities:\n            raise ValueError(\n                f\"Invalid modality: {modality}. The valid modalities are: {valid_modalities}\"\n            )\n</code></pre>"},{"location":"parsers/pymupdf_parser/#parsestudio.parsers.pymupdf_parser.PyMuPDFParser.load_documents","title":"<code>load_documents(paths)</code>  <code>staticmethod</code>","text":"<p>Load the documents from the given paths.</p> <p>Parameters:</p> Name Type Description Default <code>paths</code> <code>List[str]</code> <p>List of paths to the PDF files.</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>Generator[List[Page], None, None]</code> <p>A generator that yields a list of pages for each document</p> Source code in <code>parsestudio/parsers/pymupdf_parser.py</code> <pre><code>@staticmethod\ndef load_documents(paths: List[str]) -&gt; Generator[List[Page], None, None]:\n    \"\"\"\n    Load the documents from the given paths.\n\n    Args:\n        paths (List[str]): List of paths to the PDF files.\n\n    Returns:\n        result (Generator[List[Page], None, None]): A generator that yields a list of pages for each document\n    \"\"\"\n    for path in paths:\n        with fitz.open(path) as doc:\n            pages = [doc.load_page(page_num) for page_num in range(doc.page_count)]\n            yield pages\n</code></pre>"},{"location":"parsers/pymupdf_parser/#parsestudio.parsers.pymupdf_parser.PyMuPDFParser.parse","title":"<code>parse(paths, modalities=['text', 'tables', 'images'])</code>","text":"<p>Parse the PDF file and return the extracted the specified modalities.</p> <p>Parameters:</p> Name Type Description Default <code>paths</code> <code>Union[str, List[str]]</code> <p>A path or a list of paths to the PDF files.</p> required <code>modalities</code> <code>List[str]</code> <p>List of modalities to extract. Defaults to [\"text\", \"tables\", \"images\"].</p> <code>['text', 'tables', 'images']</code> <p>Returns:</p> Name Type Description <code>data</code> <code>List[ParserOutput]</code> <p>A list of ParserOutput objects containing the extracted modalities.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the modality is not valid</p> <p>Example:</p> <p>Example</p> <pre><code>parser = PyMuPDFParser()\ndata = parser.parse(\"path/to/file.pdf\", modalities=[\"text\", \"tables\", \"images\"])\nprint(len(data)) \n# Output: 1\ntext = data[0].text # TextElement\ntables = data[0].tables # List of TableElement\nimages = data[0].images # List of ImageElement\n\n# Access the text\ntext = text.text\n\n\n# Access the first table\ntable = tables[0]\n# Access the markdown representation of the table\ntable_md = table.markdown\n# Access the dataframe representation of the table\ntable_df = table.dataframe\n# Access the metadata of the table\npage_number = table.metadata.page_number\nbbox = table.metadata.bbox\n\n# Access the first image\nimage = images[0]\n# Access the image object\nimage_obj = image.image # PIL Image object\n# Access the metadata of the image\npage_number = image.metadata.page_number\nbbox = image.metadata.bbox \n</code></pre> Source code in <code>parsestudio/parsers/pymupdf_parser.py</code> <pre><code>def parse(\n    self,\n    paths: Union[str, List[str]],\n    modalities: List[str] = [\"text\", \"tables\", \"images\"],\n) -&gt; List[ParserOutput]:\n    \"\"\"\n    Parse the PDF file and return the extracted the specified modalities.\n\n    Args:\n        paths (Union[str, List[str]]): A path or a list of paths to the PDF files.\n        modalities (List[str], optional): List of modalities to extract. Defaults to [\"text\", \"tables\", \"images\"].\n\n    Returns:\n        data (List[ParserOutput]): A list of ParserOutput objects containing the extracted modalities.\n\n    Raises:\n        ValueError: If the modality is not valid\n\n    Example:\n    !!! example\n        ```python\n        parser = PyMuPDFParser()\n        data = parser.parse(\"path/to/file.pdf\", modalities=[\"text\", \"tables\", \"images\"])\n        print(len(data)) \n        # Output: 1\n        text = data[0].text # TextElement\n        tables = data[0].tables # List of TableElement\n        images = data[0].images # List of ImageElement\n\n        # Access the text\n        text = text.text\n\n\n        # Access the first table\n        table = tables[0]\n        # Access the markdown representation of the table\n        table_md = table.markdown\n        # Access the dataframe representation of the table\n        table_df = table.dataframe\n        # Access the metadata of the table\n        page_number = table.metadata.page_number\n        bbox = table.metadata.bbox\n\n        # Access the first image\n        image = images[0]\n        # Access the image object\n        image_obj = image.image # PIL Image object\n        # Access the metadata of the image\n        page_number = image.metadata.page_number\n        bbox = image.metadata.bbox \n        ```\n    \"\"\"\n    self._validate_modalities(modalities)\n\n    if isinstance(paths, str):\n        paths = [paths]\n\n    data = []\n    for result in self.load_documents(paths):\n        output = self.__export_result(result, modalities)\n\n        data.append(output)\n\n    return data\n</code></pre>"}]}